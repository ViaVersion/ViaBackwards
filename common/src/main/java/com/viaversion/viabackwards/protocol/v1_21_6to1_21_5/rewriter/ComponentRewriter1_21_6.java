/*
 * This file is part of ViaBackwards - https://github.com/ViaVersion/ViaBackwards
 * Copyright (C) 2016-2025 ViaVersion and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.viaversion.viabackwards.protocol.v1_21_6to1_21_5.rewriter;

import com.viaversion.nbt.tag.CompoundTag;
import com.viaversion.viabackwards.api.BackwardsProtocol;
import com.viaversion.viabackwards.api.rewriters.text.NBTComponentRewriter;
import com.viaversion.viabackwards.protocol.v1_21_6to1_21_5.storage.ClickEvents;
import com.viaversion.viaversion.api.connection.UserConnection;
import com.viaversion.viaversion.protocols.v1_21_5to1_21_6.packet.ClientboundPacket1_21_6;

public final class ComponentRewriter1_21_6 extends NBTComponentRewriter<ClientboundPacket1_21_6> {

    public ComponentRewriter1_21_6(final BackwardsProtocol<ClientboundPacket1_21_6, ?, ?, ?> protocol) {
        super(protocol);
    }

    @Override
    protected void processCompoundTag(final UserConnection connection, final CompoundTag tag) {
        super.processCompoundTag(connection, tag);

        final CompoundTag clickEvent = tag.getCompoundTag("click_event");
        if (clickEvent == null) {
            return;
        }

        final String action = clickEvent.getString("action");

        // Make them run a command generated by us executing the actual logic
        if ("show_dialog".equals(action)) {
            final ClickEvents clickEvents = connection.get(ClickEvents.class);
            final String command = clickEvents.storeClickEvent(clickEvent.copy());

            clickEvent.putString("action", "run_command");
            clickEvent.putString("command", command);
            clickEvent.remove("dialog");
        } else if ("custom".equals(action)) {
            final ClickEvents clickEvents = connection.get(ClickEvents.class);
            final String command = clickEvents.storeClickEvent(clickEvent.copy());

            clickEvent.putString("action", "run_command");
            clickEvent.putString("command", command);
            clickEvent.remove("id");
            clickEvent.remove("payload");
        }
    }
}
